{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/zeke/projects/highwater/packages/web/src/app/api/auth/%5B...auth0%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\n\n// Simple implementation of Auth0 login/callback/logout routes\nexport async function GET(request: NextRequest) {\n  const { pathname } = new URL(request.url);\n\n  // Login route\n  if (pathname.endsWith('/login')) {\n    const redirectUri = `${process.env.AUTH0_BASE_URL}/api/auth/callback`;\n    const authUrl = `${process.env.AUTH0_ISSUER_BASE_URL}/authorize?` +\n      `response_type=code&` +\n      `client_id=${process.env.AUTH0_CLIENT_ID}&` +\n      `redirect_uri=${encodeURIComponent(redirectUri)}&` +\n      `scope=openid profile email`;\n\n    return NextResponse.redirect(authUrl);\n  }\n\n  // Callback route\n  if (pathname.endsWith('/callback')) {\n    // In a real implementation, you would exchange the code for tokens\n    // For this workaround, we'll create a simple mock session\n    const mockSession = {\n      user: {\n        name: 'Demo User',\n        email: 'user@example.com',\n        sub: 'auth0|123456',\n      },\n      expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n    };\n\n    // Sign the session with your AUTH0_SECRET\n    const token = jwt.sign(mockSession, process.env.AUTH0_SECRET!);\n\n    // Set the session cookie\n    return new NextResponse(null, {\n      status: 302,\n      headers: {\n        'Set-Cookie': `appSession=${token}; HttpOnly; Path=/; Max-Age=86400; SameSite=Lax;${process.env.NODE_ENV === 'production' ? ' Secure;' : ''}`,\n        Location: process.env.AUTH0_BASE_URL!,\n      },\n    });\n  }\n\n  // Logout route\n  if (pathname.endsWith('/logout')) {\n    return new NextResponse(null, {\n      status: 302,\n      headers: {\n        'Set-Cookie': 'appSession=; HttpOnly; Path=/; Max-Age=0; SameSite=Lax;',\n        Location: process.env.AUTH0_BASE_URL!,\n      },\n    });\n  }\n\n  return NextResponse.json({ error: 'Not found' }, { status: 404 });\n}\n\nexport async function POST(request: NextRequest) {\n  return NextResponse.json({ error: 'Method not allowed' }, { status: 405 });\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAExC,cAAc;IACd,IAAI,SAAS,QAAQ,CAAC,WAAW;QAC/B,MAAM,cAAc,GAAG,QAAQ,GAAG,CAAC,cAAc,CAAC,kBAAkB,CAAC;QACrE,MAAM,UAAU,GAAG,QAAQ,GAAG,CAAC,qBAAqB,CAAC,WAAW,CAAC,GAC/D,CAAC,mBAAmB,CAAC,GACrB,CAAC,UAAU,EAAE,QAAQ,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,GAC3C,CAAC,aAAa,EAAE,mBAAmB,aAAa,CAAC,CAAC,GAClD,CAAC,0BAA0B,CAAC;QAE9B,OAAO,qOAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,iBAAiB;IACjB,IAAI,SAAS,QAAQ,CAAC,cAAc;QAClC,mEAAmE;QACnE,0DAA0D;QAC1D,MAAM,cAAc;YAClB,MAAM;gBACJ,MAAM;gBACN,OAAO;gBACP,KAAK;YACP;YACA,SAAS,IAAI,KAAK,KAAK,GAAG,KAAK,KAAK,KAAK,KAAK,MAAM,WAAW;QACjE;QAEA,0CAA0C;QAC1C,MAAM,QAAQ,gMAAA,CAAA,UAAG,CAAC,IAAI,CAAC,aAAa,QAAQ,GAAG,CAAC,YAAY;QAE5D,yBAAyB;QACzB,OAAO,IAAI,qOAAA,CAAA,eAAY,CAAC,MAAM;YAC5B,QAAQ;YACR,SAAS;gBACP,cAAc,CAAC,WAAW,EAAE,MAAM,gDAAgD,EAAE,6EAAqD,IAAI;gBAC7I,UAAU,QAAQ,GAAG,CAAC,cAAc;YACtC;QACF;IACF;IAEA,eAAe;IACf,IAAI,SAAS,QAAQ,CAAC,YAAY;QAChC,OAAO,IAAI,qOAAA,CAAA,eAAY,CAAC,MAAM;YAC5B,QAAQ;YACR,SAAS;gBACP,cAAc;gBACd,UAAU,QAAQ,GAAG,CAAC,cAAc;YACtC;QACF;IACF;IAEA,OAAO,qOAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAY,GAAG;QAAE,QAAQ;IAAI;AACjE;AAEO,eAAe,KAAK,OAAoB;IAC7C,OAAO,qOAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAqB,GAAG;QAAE,QAAQ;IAAI;AAC1E","debugId":null}}]
}